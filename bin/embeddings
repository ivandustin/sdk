#!/usr/bin/env python
from os import environ
from sys import stdin
from transformers import AutoModel
import torch
from numpystring import to_string

IS_GPU = torch.cuda.is_available()


def main():
    model_name = environ.get("MODEL", "sentence-transformers/LaBSE")
    model = to_gpu(AutoModel.from_pretrained(model_name).eval())
    if environ.get("HALF", "0") == "1":
        model = model.half()
    for line in stdin:
        input_ids = to_gpu(unshift(torch.tensor(parse(line))))
        embeddings = model(input_ids).last_hidden_state
        print(to_string(to_cpu(shift(embeddings))))


def parse(line):
    return list(map(int, line.split(" ")))


def to_gpu(tensor):
    return tensor.cuda() if IS_GPU else tensor


def to_cpu(tensor):
    return tensor.detach().cpu().numpy()


def shift(tensor):
    return tensor.squeeze(0)


def unshift(tensor):
    return tensor.unsqueeze(0)


if __name__ == "__main__":
    with torch.no_grad():
        main()
